<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>用GitHub Actions 自動化部署blog</title>
    <url>/blog/2023/07/03/deploy-blog-using-github-actions/</url>
    <content><![CDATA[<p>網路上有很多怎麼用hexo, hugo 等等架blog 的教學，這邊紀錄一下如何自動化部署到 GitHub page 。</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>這需要一點點基本CICD 的概念。在偵測到有新的commit 時，自動開啟一台虛擬機器，執行預先寫好的script，完成部署。這也就是GitOps。</p>
<h1 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h1><p>官方教學：<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site%E3%80%82">https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site。</a></p>
<p>在repo頁面上找到settings&#x2F;pages，看到有兩種方式：</p>
<ol>
<li>GitHub Actions (beta)</li>
<li>Deploy from a branch</li>
</ol>
<h2 id="GitHub-Actions-beta"><a href="#GitHub-Actions-beta" class="headerlink" title="GitHub Actions (beta)"></a>GitHub Actions (beta)</h2><p>第一個是自己寫GitHub Actions 將靜態檔案打包好，上傳到GitHub page。比較進階一點，適合想自己寫所有步驟的人。想自己搞的人應該都有許多經驗了，可以參考：<a href="https://github.com/adityatelange/hugo-PaperMod/blob/4a924cef54081b61530a30bd69d442ae95f16561/.github/workflows/gh-pages.yml#L66-L80%E3%80%82">https://github.com/adityatelange/hugo-PaperMod/blob/4a924cef54081b61530a30bd69d442ae95f16561/.github/workflows/gh-pages.yml#L66-L80。</a></p>
<p>這邊需要用到2個actions：</p>
<ul>
<li><code>actions/upload-pages-artifact</code></li>
<li><code>actions/deploy-pages</code></li>
</ul>
<p>串接在build 後面，執行打包上傳跟發佈頁面。</p>
<h2 id="Deploy-from-a-branch"><a href="#Deploy-from-a-branch" class="headerlink" title="Deploy from a branch"></a>Deploy from a branch</h2><p>第二個是把靜態檔案推上repo，可以放在另一個branch 或是在某個子資料夾裡，這個選項GitHub會幫你執行第一個選項裡的步驟。比較簡單，而且這個方法還可以切換branch 去檢查靜態檔案，方便debug，推薦。</p>
<p>你也可以在本地build 後，手動把靜態檔案推上GitHub。這邊的目標是從build 到deploy 都用GitHub actions 完成。</p>
<p>這個blog 的repo：<a href="https://github.com/cgjosephlee/blog">https://github.com/cgjosephlee/blog</a> 。Source code 放在 <code>main</code> branch，靜態檔案放在<code>ph-pages</code> branch。</p>
<p>以hexo 為例，在 <code>hexo generate</code> 後所產生的 <code>./public</code> 裡面就是網頁的靜態檔案，我想把這裡面的內容推到 <code>gh-pages</code> branch。之後我只要有更新post markdown file，GitHub actions 就會自動build and deploy。</p>
<p>因為是在虛擬機上執行，想像在乾淨的機器上，步驟寫成script 大概是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo</span><br><span class="line"><span class="built_in">cd</span> repo</span><br><span class="line">npm ci  <span class="comment"># install dependencies</span></span><br><span class="line">npm run build  <span class="comment"># == hexo generate</span></span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line"><span class="comment"># git clone ...</span></span><br><span class="line"><span class="comment"># git checkout gh-pages</span></span><br><span class="line"><span class="comment"># git add ...</span></span><br><span class="line"><span class="comment"># git commit ...</span></span><br><span class="line"><span class="comment"># git push ...</span></span><br></pre></td></tr></table></figure>

<p>最後要推到 <code>gh-pages</code> 的步驟比較麻煩，還好有人已經寫成action 可以直接套用了。</p>
<ul>
<li><a href="https://github.com/peaceiris/actions-gh-pages">https://github.com/peaceiris/actions-gh-pages</a></li>
</ul>
<p>寫成GitHub actions yaml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span> <span class="string">pages</span> <span class="string">to</span> <span class="string">gh-pages</span> <span class="string">branch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 偵測main上面的改動，可以忽略特定檔案的改動</span></span><br><span class="line"><span class="comment"># 這裡忽略了drafts, images</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">paths-ignore:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/_drafts/**&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/images/**&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span>  <span class="comment"># job name</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span>  <span class="comment"># 虛擬機image</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span>  <span class="comment"># git clone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span>  <span class="comment"># setup node env</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&#x27;npm&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span>  <span class="comment"># install dependencies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span>  <span class="comment"># == hexo generate</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span>  <span class="comment"># push ./public to gh-pages branch</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span>  <span class="comment"># 不用修改，會自動取得token</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>

<p>設定細節可以看 <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions%E3%80%82">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions。</a></p>
<p>把檔案放在repo 裡的 <code>.github/workflows/deploy.yaml</code>（檔名隨意），推上GitHub 後，就完成GitHub Actions 的設定了。之後偵測到改動，GitHub 就會自動執行yaml 裡的動作，然後推到 <code>gh-pages</code> branch。在Actions tab 裡面可以看到執行的結果。</p>
<p>部署完成後，就可以到GitHub page 看網頁囉。</p>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple 鍵盤的Fn/Globe key</title>
    <url>/blog/2023/07/04/apple-fn-key/</url>
    <content><![CDATA[<p>前陣子買了Keychron K3 Pro 在家裡使用，結果遇到F3, F4 失效了。研究了一下才發現是karabiner 的原因，但我太依賴karabiner 了無法不用，只好想其他的解決辦法。研究的過程發現Apple 鍵盤或macbook 上的<code>Fn</code> 跟一般鍵盤的<code>Fn</code> 好像不太一樣，這邊紀錄一下。</p>
<h1 id="一般Fn-key"><a href="#一般Fn-key" class="headerlink" title="一般Fn key"></a>一般Fn key</h1><ul>
<li>不會送出keycode。</li>
<li>通常是切換鍵盤的layer，達到送出不同的keycode。</li>
<li>功能燒在鍵盤韌體上。</li>
</ul>
<h1 id="Apple-Fn-x2F-Globe🌐-key-apple-fn"><a href="#Apple-Fn-x2F-Globe🌐-key-apple-fn" class="headerlink" title="Apple Fn&#x2F;Globe🌐 key (apple_fn)"></a>Apple Fn&#x2F;Globe🌐 key (<code>apple_fn</code>)</h1><ul>
<li>是一個有keycode 的按鍵。 <code>&#123;&quot;apple_vendor_top_case_key_code&quot;: &quot;keyboard_fn&quot;&#125;</code></li>
<li>不是切換layer，比較像是control 這種控制鍵 modifier。</li>
<li>只有特定VID&#x2F;PID 的鍵盤（&#x3D; 原廠鍵盤）送出的<code>apple_fn</code>，macOS 才認可（不愧是Apple）。</li>
</ul>
<h1 id="Keychron-K3-Pro"><a href="#Keychron-K3-Pro" class="headerlink" title="Keychron K3 Pro"></a>Keychron K3 Pro</h1><ul>
<li>win&#x2F;mac mode 其實只是切換不同layer。mac (0), mac fn (1), win (2), win fn (3)，只有四層。</li>
<li>mission control (F3) 與launchpad (F4) 其實沒有送出keycode，是用某種方式模擬？或是Event Viewer 認不得？</li>
<li>因為沒有keycode，在經過karabiner 攔截後就失效了，想改都沒的改。</li>
<li>用VIA 修改：F3 → <code>C(KC_UP)</code>，F4 → <code>HYPR(KC_SPC)</code>，模擬組合鍵 (<a href="https://docs.qmk.fm/#/feature_advanced_keycodes?id=modifier-keys">ref</a>)。需額外修改開啟launchpad 的熱鍵為 <code>cmd+opt+ctrl+shift+space</code>。</li>
<li>K7 的fn2 好像可以用apple_fn？</li>
</ul>
<h1 id="Niz-mini84"><a href="#Niz-mini84" class="headerlink" title="Niz mini84"></a>Niz mini84</h1><ul>
<li>mac mode 下有兩個Fn key，Fn +  fn。</li>
<li>win&#x2F;mac mode 連VID&#x2F;PID 都不一樣。</li>
<li>mac mode 用了某個Apple 原廠鍵盤的VID&#x2F;PID 0x05ac&#x2F;0x0220 (<a href="https://devicehunt.com/view/type/usb/vendor/05AC/device/0220">link</a>，不怕被吉嗎？)，所以可以送出<code>apple_fn</code>。</li>
<li>win mode 下VID&#x2F;PID 是 0x0438&#x2F;0x5235，是AMD…? (<a href="https://devicehunt.com/search/type/usb/vendor/0438/device/any">link</a>)</li>
</ul>
<h1 id="Karabiner-Elements"><a href="#Karabiner-Elements" class="headerlink" title="Karabiner Elements"></a>Karabiner Elements</h1><ul>
<li>用虛擬鍵盤攔截實體鍵盤的keycode，修改後再送給OS。</li>
<li>如果有經過karabiner，則VID&#x2F;PID 錯誤的<code>apple_fn</code> keycode 也可以正常觸發 (<a href="https://github.com/qmk/qmk_firmware/pull/20643#issuecomment-1529263497">ref</a>)。</li>
</ul>
<h1 id="QMK"><a href="#QMK" class="headerlink" title="QMK"></a>QMK</h1><ul>
<li>2023.02，新增了mission control (KC_MCTL) 與 launchpad (KC_LPAD) 的keycode (<a href="https://github.com/qmk/qmk_firmware/blob/master/data/constants/keycodes/keycodes_0.0.2_basic.hjson">ref</a>)。</li>
<li>因為<code>apple_fn</code> 限制VID&#x2F;PID，所以QMK 無法使用這個keycode (<a href="https://github.com/qmk/qmk_firmware/pull/20643">ref</a>)。</li>
<li>但還是有辦法改，參考 <a href="https://gist.github.com/fauxpark/010dcf5d6377c3a71ac98ce37414c6c4">ref</a>。</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://sspai.com/post/79608">https://sspai.com/post/79608</a></li>
</ul>
]]></content>
      <categories>
        <category>Accessories</category>
      </categories>
      <tags>
        <tag>keyboard</tag>
      </tags>
  </entry>
</search>
